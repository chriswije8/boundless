#!/bin/bash

set -eo pipefail

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
SCRIPT_FILE="${SCRIPT_DIR}/Manage.s.sol"
REPO_ROOT_DIR="${SCRIPT_DIR:?}/../.."
FIREBLOCKS=0

POSITIONAL_ARGS=()
FORGE_SCRIPT_FLAGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
    -f|--fireblocks)
        FIREBLOCKS=1
        shift # past argument
        ;;
    --broadcast|--verify)
        FORGE_SCRIPT_FLAGS+=("$1") 
        shift
        ;;
    -*|--*)
        echo "Unknown option $1"
        exit 1
        ;;
    *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift # past argument
        ;;
    esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

if [ -n "$STACK_TAG" ]; then
    DEPLOY_KEY=${CHAIN_KEY:?}-${STACK_TAG:?}
else
    DEPLOY_KEY=${CHAIN_KEY:?}
fi

# HINT: deployment_secrets.toml contains API keys. You can write it yourself, or ask a friend.
load_env_var() {
    local var_name="$1"
    local config_key="$2"
    local config_file="$3"
    
    # Get current value of the variable
    local current_value=$(eval echo \$$var_name)
    
    if [ -z "$current_value" ]; then
        echo "$var_name from $config_file: " > /dev/stderr
        local new_value=$(yq eval -e "$config_key" "$REPO_ROOT_DIR/contracts/$config_file")
        [ -n "$new_value" ] && [[ "$new_value" != "null" ]] || exit 1
        export $var_name="$new_value"
    else
        echo "$var_name from env $current_value"
    fi
}

echo "Loading environment variables from deployment TOML files"
load_env_var "RPC_URL" ".chains[\"${CHAIN_KEY:?}\"].rpc-url" "deployment_secrets.toml"
load_env_var "ETHERSCAN_API_KEY" ".chains[\"${CHAIN_KEY:?}\"].etherscan-api-key" "deployment_secrets.toml"
load_env_var "CHAIN_ID" ".deployment[\"${DEPLOY_KEY:?}\"].id" "deployment.toml"

# Check if we're on the correct network
CONNECTED_CHAIN_ID=$(cast chain-id --rpc-url ${RPC_URL:?})
if [[ "${CONNECTED_CHAIN_ID:?}" != "${CHAIN_ID:?}" ]]; then
    echo -e "${RED}Error: connected chain id and configured chain id do not match: ${CONNECTED_CHAIN_ID:?} != ${CHAIN_ID:?} ${NC}"
    exit 1
fi

# Run a Forge script with support for Fireblocks with options set automatically
forge_script() {
    # Set our function. If the function is "help", or if the function is
    # unspecified, then print some help.
    local script_function="${1:-help}"
    shift

    if [ "${script_function:?}" == "help" ]; then
        echo "Usage:"
        echo "  CHAIN_KEY=ethereum-sepolia [STACK_TAG=staging] ${0} <script_function> [--fireblocks] [--verify] [--broadcast]"
        exit 0
    fi

    local target="${SCRIPT_FILE:?}:${script_function:?}"
    echo "Running forge script $target"

    if [ $FIREBLOCKS -gt 0 ]; then
        # Check for fireblocks
        if ! command -v fireblocks-json-rpc &> /dev/null
        then
            echo "fireblocks-json-rpc not found"
            echo "can be installed with npm install -g @fireblocks/fireblocks-json-rpc"
            exit 1
        fi

        # Run forge via fireblocks
        fireblocks-json-rpc --verbose --rpcUrl ${RPC_URL:?} --http --apiKey ${FIREBLOCKS_API_KEY:?} -- \
            forge script ${FORGE_SCRIPT_FLAGS} \
            --slow --unlocked \
            --etherscan-api-key=${ETHERSCAN_API_KEY:?} \
            --rpc-url {} \
            "$target" "$@"
    else
        # Run forge
        forge script ${FORGE_SCRIPT_FLAGS} \
            --private-key=${DEPLOYER_PRIVATE_KEY:?} \
            --etherscan-api-key=${ETHERSCAN_API_KEY:?} \
            --rpc-url ${RPC_URL:?} \
            "$target" "$@"
    fi
}

# Run from the repo root for consistency.
cd ${REPO_ROOT_DIR:?}

forge_script "$@"
